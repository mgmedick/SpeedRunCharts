{"version":3,"file":"master.min.css","mappings":";AAgDI;QACI,gBAAgB;QAChB,iBAAiB;AACrB;;;;;;ACiGA;AACI;YACI,2BAA2B;YAC3B,iBAAiB;AACrB;AAEA;YACI,2BAA2B;YAC3B,gBAAgB;YAChB,sBAAsB;AAC1B;AACJ;;;;;;AC3CA;QACI,kBAAkB;QAClB,WAAW;QACX,gBAAgB;AACpB;AAEA;QACI,WAAW;AACf;AAEA;QACI,eAAe;QACf,kBAAkB;QAClB,SAAS;QACT,UAAU;QACV,gCAAgC;AACpC;AAEA;QACI,mBAAmB;QACnB,gBAAgB;QAChB,uBAAuB;AAC3B;AAEA;QACI,WAAW;AACf;AAEA;QACI,aAAa;AACjB;AAEA;QACI,cAAc;AAClB;AAEA;AACI;YACI,cAAc;YACd,eAAe;AACnB;AAEA;YACI,eAAe;YACf,4BAA4B;AAChC;AAEA;YACI,aAAa;AACjB;AAEA;YACI,cAAc;AAClB;AAEA;YACI,iBAAiB;AACrB;AACJ;AAEA;AACI;YACI,cAAc;AAClB;AAEA;YACI,aAAa;AACjB;AAEA;YACI,iBAAiB;AACrB;AACJ;;;;;;AC5GA;AACI;YACI,0BAA0B;AAC9B;AACJ;;;;;;ACzCA;QACI,sBAAsB;QACtB,4BAA4B;QAC5B,8BAA8B;AAClC;AAEA;QACI,yBAAyB;QACzB,eAAe;QACf,iBAAiB;AACrB;AAEA;QACI,2CAA2C;AAC/C;AAEA;QACI,yBAAyB;QACzB,eAAe;QACf,iBAAiB;QACjB,uBAAuB;QACvB,0BAA0B;AAC9B;AAEA;QACI,2CAA2C;AAC/C;AAEA;QACI,0BAA0B;QAC1B,iBAAiB;QACjB,iBAAiB;AACrB;AAEA;AACI;YACI,gBAAgB;AACpB;AACJ;;;;;;ACoXD;QACK,uBAAuB;AAC3B","sources":["webpack://speed-run-app.ui/./src/components/ButtonDropdownVue.vue","webpack://speed-run-app.ui/./src/components/NavbarVue.vue","webpack://speed-run-app.ui/./src/components/SpeedRunSummaryVue.vue","webpack://speed-run-app.ui/./src/components/SpeedRunListCategoryVue.vue","webpack://speed-run-app.ui/./src/components/GridTabContainerVue.vue","webpack://speed-run-app.ui/./src/components/SpeedRunGridChartVue.vue"],"sourcesContent":["<template>\n    <div class=\"dropdown\" :class=\"{ show : state }\" @click=\"toggleDropdown\">\n        <button class=\"btn dropdown-toggle\" :class=\"btnclasses\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" ref=\"btn\">\n            <slot name=\"text\"></slot>\n        </button>\n        <div class=\"dropdown-menu\" :class=\"[listclasses]\" aria-labelledby=\"dropdownMenuButton\" ref=\"list\" :style=\"[ state ? { display:'block' } : { display:'none' } ] \">\n            <slot name=\"options\"></slot>\n        </div>\n    </div>\n</template>\n<script>\n    export default {\n        name: \"ButtonDropdownVue\",\n        props: {\n            btnclasses: String,\n            listclasses: String\n        },\n        data() {\n            return {\n                state: false\n            }\n        },\n        methods: {\n            toggleDropdown(e) {\n                this.state = !this.state\n            },\n            close(e) {\n                if (!this.$el.contains(e.target)) {\n                    this.state = false;\n                }\n            }\n        },\n        updated: function(){\n            if (this.$refs.list?.querySelectorAll('a.dropdown-item:not(.d-none).active').length > 0) {\n                this.$refs.btn?.classList.add('active');         \n            } else {\n                this.$refs.btn?.classList.remove('active');         \n            }\n        },\n        mounted() {\n            document.addEventListener('click', this.close)\n        },\n        beforeDestroy() {\n            document.removeEventListener('click', this.close)\n        }\n    };\n</script>\n<style scoped>\n    .dropdown-menu {\n        overflow-y: auto;\n        max-height: 300px;\n    }\n</style>\n\n\n\n","<template>\n    <div>\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <a class=\"navbar-brand\" href=\"/\">\n                <img src=\"/dist/fonts/pie-chart.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top pr-1\" alt=\"\">\n                SpeedRunCharts\n            </a>\n            <button id=\"btnToggleNavbar\" class=\"navbar-toggler\" type=\"button\" @click=\"toggleNavbar = !toggleNavbar\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div id=\"navbarNav\" class=\"navbar-collapse\" :style=\"[ toggleNavbar ? null : { display:'none' } ]\">\n                <ul class=\"navbar-nav mr-auto\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/Menu/About\">About</a>\n                    </li>\n                    <li class=\"nav-item active p-2\">\n                        <a href=\"https://github.com/speedruncomorg/api\" class=\"badge badge-primary nav-link\">Powered by speedrun.com API</a>\n                    </li>\n                </ul>\n                <form class=\"form-inline\">\n                    <vue-next-select v-model=\"searchSelected\"\n                                    :options=\"searchOptions\"\n                                    :loading=\"searchLoading\"\n                                    searchable\n                                    @search:input=\"onSearchGames\"\n                                    @selected=\"onSearchSelected\"\n                                    group-by=\"isConstructor\"\n                                    label-by=\"label\"\n                                    value-by=\"value\"\n                                    clear-on-select\n                                    close-on-select\n                                    openDirection=\"bottom\"\n                                    placeholder=\"Search games, users\"\n                                    :style=\"{ width:100 + '%' }\" />\n                </form>\n                <div v-if=\"isauth\">\n                    <button-dropdown :btnclasses=\"'btn-secondary'\" :listclasses=\"'dropdown-menu-sm-right'\">\n                        <template v-slot:text>\n                            <span>\n                                <i class=\"fa fa-user\"></i><span class=\"pl-2\">{{ username }}</span>\n                            </span>\n                        </template>\n                        <template v-slot:options>\n                            <a href=\"/UserAccount/UserAccountDetails\" class=\"dropdown-item text-secondary\"><i class=\"fa fa-cog\"></i><span class=\"pl-2\">Settings</span></a>\n                            <a href=\"/SpeedRun/Logout\" class=\"dropdown-item text-secondary\"><i class=\"fa fa-sign-out-alt\"></i><span class=\"pl-2\">Log out</span></a>\n                        </template>\n                    </button-dropdown>\n                </div>\n                <ul v-else class=\"navbar-nav\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#\" @click=\"showLoginModal = true\">Log In</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#\" @click=\"showSignUpModal = true\">Sign Up</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n        <custom-modal v-model=\"showLoginModal\" v-if=\"showLoginModal\" contentclass=\"modal-md\">\n            <template v-slot:title>\n                Log In\n            </template>\n            <login @forgotpass=\"showResetModal = !(showLoginModal = false)\" />\n        </custom-modal>\n        <custom-modal v-model=\"showResetModal\" v-if=\"showResetModal\" contentclass=\"modal-md\">\n            <template v-slot:title>\n                Reset Password\n            </template>\n            <reset-password />\n        </custom-modal>\n        <custom-modal v-model=\"showSignUpModal\" v-if=\"showSignUpModal\" contentclass=\"modal-md\">\n            <template v-slot:title>\n                Sign Up\n            </template>\n            <signup />\n        </custom-modal>\n    </div>   \n</template>\n<script>\n    import axios from 'axios'\n\n    export default {\n        name: \"NavbarVue\",\n        props: {\n            isauth: Boolean,\n            isdarktheme: Boolean,\n            username: String,\n            userid: String\n        },\n        data: function () {\n            return {\n                searchSelected: null,\n                searchOptions: [],\n                searchLoading: false,\n                showLoginModal: false,\n                showResetModal: false,\n                showSignUpModal: false,\n                showDropdown: false,\n                toggleNavbar: false\n            }\n        },\n        computed: {\n        },\n        created: function () {\n        },\n        methods: {\n            onSearchGames: function (e) {\n                if (e.target.value) {\n                    var that = this;\n                    this.searchLoading = true;\n\n                    axios.get('/Menu/Search', { params: { term: e.target.value } })\n                        .then(res => {\n                            that.searchOptions = res.data.reduce((flat, constructor) => {\n                                return flat\n                                    .concat({\n                                        label: constructor.label,\n                                        value: constructor.subItems.map(method => method.value),\n                                        isConstructor: true\n                                    })\n                                    .concat(constructor.subItems.map(method => ({ label: method.label, value: method.value, category: constructor.label })))\n                            }, []);\n                            that.searchLoading = false;\n\n                            return res;\n                        })\n                        .catch(err => { console.error(err); return Promise.reject(err); });\n                }\n            },\n            onSearchSelected: function (option) {\n                var controller;\n                var action;\n                var params;\n\n                if (option.category == 'Games') {\n                    controller = \"Game\";\n                    action = \"GameDetails\"\n                } else {\n                    controller = \"User\";\n                    action = \"UserDetails\"\n                } \n\n                location.href = encodeURI('/' + controller + \"/\" + action + \"/\" + option.value);\n            }\n        }\n    };\n</script>\n<style scoped>\n    @media (min-width: 992px) {\n        :deep(.vue-select) {\n            min-width: 400px !important;\n            margin-right: 8px;\n        }\n\n        :deep(.vue-dropdown) {\n            min-width: 400px !important;\n            max-width: 500px;\n            width: auto !important;\n        }\n    }\n</style>\n\n\n\n\n\n","<template>\n    <div class=\"speedRunSummaryContainer container mx-auto p-0\" style=\"max-width:598px; margin-bottom:20px;\">\n        <div class=\"speedRunSummary bg-dark\">\n            <div class=\"container pt-2 px-2 pb-0 d-flex\">\n                <div class=\"p-0 col-1\">\n                    <div style=\"max-width:37px;\">\n                        <div class=\"img-round\">\n                            <img :src=\"item.gameCoverImageLink\" class=\"img-fluid\" alt=\"Responsive image\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-auto nowrap-elipsis p-0 align-self-end game-title\" style=\"max-width:60%;\">\n                    <a :href=\"'/Game/GameDetails/' + item.game.abbr\" class=\"text-primary\">{{ item.game.name }}</a>\n                </div>\n                <div class=\"col-auto pl-1 align-self-end\">\n                    &middot;\n                    <small class=\"text-secondary pl-1\">{{ item.relativeVerifyDateStringShort }}</small>\n                </div>\n                <div class=\"col-auto ml-auto p-0 align-self-start\">\n                    <button class=\"btn btn-secondary detail\" @click=\"showModal = true\" style=\"font-size:12px;\">Details</button>\n                </div>\n            </div>\n            <div class=\"container px-2 pb-2 pt-1 d-flex\">\n                <div class=\"col-sm-11 p-0 align-self-center\">\n                    <div class=\"text-secondary nowrap-elipsis show-md\" style=\"font-size: 14px;\">\n                        <template v-if=\"item.rankString\"><i v-if=\"getIconClass(item.rank)\" class=\"fa fa-trophy pr-1\" :class=\"getIconClass(item.rank)\"></i><span>{{ item.rankString }}</span>&nbsp;-&nbsp;</template>\n                        <template v-for=\"(player, index) in item.players\">\n                            <a :href=\"'/User/UserDetails/' + player.abbr\" class=\"text-primary\">{{ player.name }}</a>\n                            {{ (item.players.length -1 != index) ? ', ' : '' }}\n                        </template>&nbsp;-&nbsp;<small>{{ item.primaryTimeString }}</small>\n                    </div>\n                    <div class=\"show-sm\">\n                        <div class=\"text-secondary nowrap-elipsis\" style=\"font-size: 14px;\">\n                            <template v-if=\"item.rankString\"><i v-if=\"getIconClass(item.rank)\" class=\"fa fa-trophy pr-1\" :class=\"getIconClass(item.rank)\"></i><span>{{ item.rankString }}</span>&nbsp;-&nbsp;</template><small>{{ item.primaryTimeString }}</small>\n                        </div>\n                        <div class=\"text-secondary nowrap-elipsis\" style=\"font-size: 14px; \">\n                            <template v-for=\"(player, index) in item.players\">\n                                <a :href=\"'/User/UserDetails/' + player.abbr\" class=\"text-primary\">{{ player.name }}</a>\n                                {{ (item.players.length -1 != index) ? ', ' : '' }}\n                            </template>\n                        </div>\n                    </div>                            \n                    <div class=\"py-1\">\n                        <span v-if=\"item.category?.name\" class=\"badge badge-secondary font-weight-normal mr-1\" style=\"font-size:12px;\">{{ item.category?.name }}</span>\n                        <span v-if=\"item.level?.name\" class=\"pr-1\"><span class=\"badge badge-secondary font-weight-normal mr-1\" style=\"font-size:12px;\">{{ item.level?.name }}</span></span>\n                        <template v-for=\"(subCategoryVariableValueName, index) in item.subCategoryVariableValueNames\">\n                            <span class=\"badge badge-secondary font-weight-normal mr-1\" style=\"font-size:12px;\">{{ subCategoryVariableValueName }}</span>\n                        </template>\n                    </div>                      \n                </div>\n                <div class=\"col-sm-1 ml-auto align-self-center p-0 show-sm image-container\" @click=\"showVideoSm = !showVideoSm\">\n                    <img :src=\"item.videoThumbnailLink\" />\n                    <i class=\"play-icon fa fa-play\"></i>\n                </div>                    \n            </div>\n            <div class=\"body p-0 embed-responsive embed-responsive-16by9 show-md\">\n                <iframe :src=\"item.videoLink\"\n                        loading=\"lazy\"\n                        frameborder=\"0\"\n                        autoplay=\"0\"\n                        scrolling=\"no\"\n                        allowfullscreen=\"true\"></iframe>\n            </div>            \n            <div v-if=\"showVideoSm\" class=\"body p-0 embed-responsive embed-responsive-16by9 show-sm\">\n                <iframe :src=\"item.videoLink\"\n                        loading=\"lazy\"\n                        frameborder=\"0\"\n                        autoplay=\"0\"\n                        scrolling=\"no\"\n                        allowfullscreen=\"true\"></iframe>\n            </div>\n            <input type=\"hidden\" class=\"orderValue\" :value=\"item.id\" />\n            <custom-modal v-model=\"showModal\" v-if=\"showModal\" contentclass=\"modal-lg\">\n                <template v-slot:title>\n                    Details\n                </template>\n                <speedrun-edit :gameid=\"item.game.id.toString()\" :speedrunid=\"item.id.toString()\" :readonly=\"true\" />\n            </custom-modal>\n        </div>\n    </div>\n</template>\n<script>\n    export default {\n        name: \"SpeedRunSummaryVue\",\n        props: {\n            item: Object,\n            index: Number\n        },\n        data() {\n            return {\n                showModal: false,\n                showVideoSm: false\n            }\n        },\n        methods: {\n            getIconClass: function (rank) {\n                var iconClass = '';\n\n                switch (rank) {\n                    case 1:\n                        iconClass = 'gold';\n                        break;\n                    case 2:\n                        iconClass = 'silver';\n                        break;\n                    case 3:\n                        iconClass = 'bronze';\n                        break;\n                }\n\n                return iconClass;\n            }, \n        }       \n    };\n</script>\n<style scoped>\n    .image-container {\n        position: relative;\n        width: 90px;\n        margin-left:auto;\n    }\n\n    .image-container img{\n        width: 90px;\n    }\n\n    .image-container .play-icon{\n        cursor: pointer;\n        position: absolute;\n        top : 50%;\n        left : 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .nowrap-elipsis {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n\n    .gold {\n        color: gold;\n    }\n\n    .silver {\n        color: silver;\n    }\n\n    .bronze {\n        color: #b08d57;\n    }\n\n    @media (max-width: 768px) {\n        .btn {\n            font-size:11px;\n            padding:4px 6px;\n        }\n\n        .game-title {\n            font-size: 14px;\n            padding-left: 8px !important;\n        }\n\n        .show-md {\n            display: none;\n        }\n\n        .show-sm {\n            display: block;\n        }\n\n        .speedRunSummaryContainer {\n            min-height: 124px;\n        }\n    }\n\n    @media (min-width: 768px) {\n        .show-md {\n            display: block;\n        }\n\n        .show-sm {\n            display: none;\n        }\n\n        .speedRunSummaryContainer {\n            min-height: 445px;\n        } \n    }    \n</style>\n\n\n\n\n","<template>\n    <div>\n        <div>\n            <div class=\"mx-auto p-2\" style=\"max-width:598px; margin-bottom:20px;\">\n                <div class=\"btn-group btn-group-toggle pr-2\">\n                    <label v-for=\"(item, itemIndex) in items\" class=\"btn btn-primary btn-sm font-weight-bold category\" :class=\"{ 'active' : categoryid == item.id }\" style=\"font-size:13px;\" v-tippy=\"item.description\">\n                        <input type=\"radio\" autocomplete=\"off\" :value=\"item.id\" v-model=\"categoryid\" @click=\"onCategoryChange\"><i :class=\"getIconClass(item.id)\"></i>&nbsp;{{ item.displayName }}\n                    </label>\n                </div>\n            </div>\n        </div>\n        <div>\n            <speedrun-list :categoryid=\"categoryid.toString()\"></speedrun-list>\n        </div>\n    </div>\n</template>\n<script>\n    import axios from 'axios';\n\n    export default {\n        name: 'SpeedRunListCategoryVue',\n        data: function () {\n            return {\n                items: [],\n                categoryid: 0\n            }\n        },\n        created() {\n            this.loadData();\n        },\n        methods: {\n            loadData: function () {\n                var that = this;\n                this.loading = true;\n\n                axios.get('/SpeedRun/GetSpeedRunListCategories')\n                    .then(res => {\n                        that.items = res.data;\n                        that.categoryid = res.data[0].id;\n                        that.loading = false;\n                        return res;\n                    })\n                    .catch(err => { console.error(err); return Promise.reject(err); });\n            },\n            getIconClass: function (id) {\n                var iconClass = '';\n\n                switch (id) {\n                    case 0:\n                        iconClass = 'fa fa-certificate';\n                        break;\n                    case 1:\n                        iconClass = 'fa fa-percentage';\n                        break;\n                    case 2:\n                        iconClass = 'fa fa-award';\n                        break;\n                    case 3:\n                        iconClass = 'fa fa-cubes';\n                        break;\n                    case 4:\n                        iconClass = 'fa fa-star';\n                        break;\n                    case 5:\n                        iconClass = 'fa fa-fire';\n                        break;                        \n                }\n\n                iconClass += \" fa-sm\";\n\n                return iconClass;\n            },\n            onCategoryChange: function (event) {\n                Array.from(document.querySelectorAll('.category.active')).forEach((el) => el.classList.remove('active'));\n                event.target.parentElement.classList.add(\"active\");\n            }\n        }\n    };\n</script>\n<style scoped>\n    @media (max-width: 575px) {\n        .category {\n            font-size: 11px !important;\n        }\n    }    \n</style>\n\n\n\n\n","<template>\n    <div class=\"container p-0 mt-4\">\n        <div class=\"row no-gutters pr-1 pt-1 pb-0 pr-0\">\n            <div class=\"col tab-list\">\n                <ul class=\"nav nav-pills\">\n                    <li class=\"nav-item py-1 pr-1\">\n                        <a class=\"nav-link p-2\" :class=\"{ 'active' : gridID == 0 }\" href=\"#/\" data-value=\"0\" @click=\"onTabClick\">{{ isgame ? \"Leaderboards\" : \"Runs\" }}</a>\n                    </li>\n                    <li class=\"nav-item py-1 pr-1\">\n                        <a class=\"nav-link p-2\" :class=\"{ 'active' : gridID == 1 }\" href=\"#/\" data-value=\"1\" @click=\"onTabClick\">{{ isgame ? \"World Records\" : \"Personal Bests\" }}</a>            \n                    </li>\n                </ul>\n            </div>\n        </div>\n        <div v-if=\"gridID == 0\">\n            <speedrun-grid-tab :isgame=\"isgame\" :id=\"id\"></speedrun-grid-tab>\n        </div>\n        <div v-else>\n            <worldrecord-grid-tab :isgame=\"isgame\" :id=\"id\"></worldrecord-grid-tab>   \n        </div>\n    </div>\n</template>\n<script>\n    export default {\n        name: \"GridTabContainerVue\",\n        props: {\n            isgame: Boolean,\n            id: String\n        },\n        data() {\n            return {\n                gridID: '0'\n            }\n        },\n        methods: {\n            onTabClick: function (event) {\n                var value = event.target.getAttribute('data-value');\n                this.gridID = value;              \n            },\n        }       \n    };\n</script>\n<style scoped>\n    :deep(.tab-list .nav) {\n        /*overflow-y: hidden;*/\n        flex-wrap: nowrap !important;\n        white-space: nowrap !important;\n    }\n\n    :deep(.tab-list .nav-link) {\n        background-color: #313131;\n        font-size: 13px;\n        font-weight: bold;\n    }\n\n    :deep(.tab-list .nav-link.active) {\n        background-color: var(--primary) !important;\n    }\n\n    :deep(.tab-list .dropdown .btn.dropdown-toggle) {\n        background-color: #313131;\n        font-size: 13px;\n        font-weight: bold;\n        border: none !important;\n        padding: 0.5rem !important;\n    }\n\n    :deep(.tab-list .dropdown .btn.dropdown-toggle.active) {\n        background-color: var(--primary) !important;\n    }\n\n    :deep(.tab-row-name) {\n        font-size: 14px !important;\n        line-height: 18px;\n        font-weight: bold;\n    }\n\n    @media (max-width: 575px) {\n        :deep(.tab-list .dropdown .dropdown-menu) {\n            max-width: 200px;\n        }\n    }\n</style>\n\n\n\n\n\n\n\n\n\n\n","<template>\n    <div class=\"card\">\n        <div class=\"card-header\" id=\"headingOne\">\n            <h5 class=\"mb-0\">\n                <div v-if=\"showcharts\">\n                    <a class=\"btn btn-link font-weight-bold d-flex align-items-end\" style=\"line-height: 15px;\" href=\"#/\" @click=\"$emit('onshowchartsclick', $event)\"><i class=\"fa fa-chevron-down align-self-center\"></i><img src=\"/dist/fonts/bar-chart.svg\" class=\"img-fluid brand-logo align-self-center mx-2\" alt=\"Responsive image\">Hide Charts</a>\n                </div>\n                <div v-else>\n                    <a class=\"btn btn-link font-weight-bold d-flex align-items-end\" style=\"line-height: 15px;\" href=\"#/\" @click=\"$emit('onshowchartsclick', $event)\"><i class=\"fa fa-chevron-right align-self-center\"></i><img src=\"/dist/fonts/bar-chart.svg\" class=\"img-fluid brand-logo align-self-center mx-2\" alt=\"Responsive image\">Show Charts</a>\n                </div>\n            </h5>\n        </div>\n        <div class=\"container row chart-container\" :style=\"[ showcharts ? null : { display:'none' } ]\">\n            <div class=\"col-sm-4\">\n                <div id=\"divChart1\"></div>\n            </div>\n            <div class=\"col-sm-4\">\n                <div id=\"divChart2\"></div>\n            </div>\n            <div class=\"col-sm-4\">\n                <div id=\"divChart3\"></div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import moment from 'moment';\n    //import { chain, clone, map, value, join } from 'lodash';\n    import { chain } from 'lodash';    \n    import { getDateDiffList, formatTime } from '../js/common.js';\n\n    export default {\n        name: \"SpeedRunGridChartsVue\",\n        emits: [\"onshowchartsclick\"],\n        props: {\n            tabledata: Array,\n            isgame: Boolean,\n            showcharts: Boolean\n        },\n        created: function () {\n            this.loadData();\n        },\n        methods: {\n            loadData() {\n                var that = this;\n                FusionCharts.ready(function () {\n                    if (that.isgame) {\n                        var gameWorldRecordChart = new FusionCharts(that.getWorldRecordPerMonthChart('divChart1'));\n                        var gameSpeedRunsPercentileChart = new FusionCharts(that.getSpeedRunsPercentileChart('divChart2'));\n                        var gameTopSpeedRunChart = new FusionCharts(that.getTopSpeedRunChart('divChart3', that.isgame));\n\n                        gameWorldRecordChart.render();\n                        gameSpeedRunsPercentileChart.render();\n                        gameTopSpeedRunChart.render();\n                    } else {\n                        var userSpeedRunsByMonth = new FusionCharts(that.getFastestSpeedRunsPerDayChart('divChart1'));\n                        var userSpeedRunsPercentileChart = new FusionCharts(that.getSpeedRunsPercentileChart('divChart2'));\n                        var userTopSpeedRunChart = new FusionCharts(that.getTopSpeedRunChart('divChart3', that.isgame));\n\n                        userSpeedRunsByMonth.render();\n                        userSpeedRunsPercentileChart.render();\n                        userTopSpeedRunChart.render();\n                    }\n                });\n            },\n            getWorldRecordPerMonthChart(container) {\n                var categories = [];\n                var dataset = [];\n\n                if (this.tabledata?.length > 0) {\n                    var _data = chain(this.tabledata).clone().value();\n                    _data = _data.sort((a, b) => { \n                        return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds\n                    });                    \n\n                    var filteredData = [];\n                    while (_data.length > 0) {\n                        var item = _data[0];\n                        filteredData.push(item);\n\n                        _data = _data.filter(x => x.dateSubmitted < item.dateSubmitted)\n                                     .sort((a, b) => { return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds });\n                    }\n\n                    var dates = filteredData.map(item => { return new Date(item.dateSubmitted) });\n                    var maxDate = moment(Math.max.apply(null, dates)).toDate();\n                    var minDate = moment(Math.min.apply(null, dates)).toDate();\n\n                    var _timePeriods = getDateDiffList(\"month\", minDate, maxDate).map(x => { return moment(x).format(\"MM/YYYY\") });\n\n                    var groupedObj = {};\n                    var chartDataObj = {};\n                    var categoryObj = {};\n\n                    filteredData.forEach(item => {\n                        var monthYear = moment(item.dateSubmitted).format(\"MM/YYYY\")\n\n                        var playerNames = chain(item.players).map(function (user) { return user.name }).value().join(\"{br}\");\n                        groupedObj[monthYear] = groupedObj[monthYear] || [];\n                        groupedObj[monthYear].push({ primaryTimeMilliseconds: item.primaryTimeMilliseconds, primaryTimeString: item.primaryTimeString, playerNames: playerNames });                  \n                    });\n\n                    if (Object.keys(groupedObj).length > 0) {\n                        var minKey = 'Min Time';\n                        chartDataObj[minKey] = {};\n                        for (var key in groupedObj) {\n                            chartDataObj[minKey][key] = chartDataObj[minKey][key] || [];\n\n                            var minItem = groupedObj[key].sort((a, b) => { return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds })[0];\n                            chartDataObj[minKey][key] = { value: minItem.primaryTimeMilliseconds, tooltext: key + \"{br}\" + minItem.playerNames + \"{br}\" + minItem.primaryTimeString };\n                        }\n\n                        categoryObj[\"category\"] = _timePeriods.map(item => {\n                            var labelObj = {};\n                            labelObj[\"label\"] = item\n                            return labelObj;\n                        });\n                        categories.push(categoryObj);\n\n                        for (var key in chartDataObj) {\n                            _timePeriods.forEach(timePeriod => {\n                                if (!chartDataObj[key].hasOwnProperty(timePeriod)) {\n                                    chartDataObj[key][timePeriod] = { value: null, tooltext: ' ' };\n                                }\n                            })\n                        }\n                    }\n\n                    for (var key in chartDataObj) {\n                        var data = chain(Object.entries(chartDataObj[key])).map(function (x) { return { category: x[0], value: x[1]?.value, tooltext: x[1]?.tooltext } }).value();\n                        if (data.length > 0) {\n                            data = data.sort((a, b) => {\n                                var monthyeara = a.category.split(\"/\");\n                                var monthyearb = b.category.split(\"/\");\n\n                                return new Date(monthyeara[1], monthyeara[0] - 1) - new Date(monthyearb[1], monthyearb[0] - 1)\n                            });\n\n                            dataset.push({ seriesname: key, data: data });\n                        }\n                    }\n                }\n\n                const chartConfig = {\n                    type: \"msline\",\n                    renderAt: container,\n                    width: \"100%\",\n                    dataFormat: \"json\",\n                    dataSource: {\n                        chart: {\n                            caption: 'World Record Progression',\n                            subCaption: 'Per Month',\n                            subcaptionFontSize: 12,\n                            xAxis: 'Date',\n                            yAxis: 'Time (Minutes)',\n                            labelDisplay: \"rotate\",\n                            labelFontSize: 12,\n                            exportEnabled: 0,\n                            showValues: 0,\n                            formatNumberScale: 1,\n                            numberOfDecimals: 0,\n                            useRoundEdges: 1,\n                            numberscalevalue: \"1000,60,60\",\n                            numberscaleunit: \"s,m,h\",\n                            defaultnumberscale: \"ms\",\n                            scalerecursively: \"1\",\n                            maxscalerecursion: \"-1\",\n                            scaleseparator: \" \",\n                            connectNullData: 1,\n                            plotBinSize: 1,\n                            setAdaptiveYMin: 1,\n                            theme: \"candy\",\n                            bgColor: \"#303030\",\n                            baseFontColor: \"#fff\",\n                            outCnvBaseFontColor: \"#fff\"\n                        },\n                        categories: categories,\n                        dataset: dataset\n                    }\n                };\n\n                return chartConfig;\n            },\n            getFastestSpeedRunsPerDayChart(container) {\n                var categories = [];\n                var dataset = [];\n\n                if (this.tabledata?.length > 0) {\n                    var _data = chain(this.tabledata).clone().value();\n                    var dates = _data.map(item => { return new Date(item.dateSubmitted) });\n                    var maxDate = moment(Math.max.apply(null, dates)).startOf('day').toDate();\n                    var minDate = moment(Math.min.apply(null, dates)).startOf('day').toDate();\n\n                    var filteredData = _data.filter((x, i) => {\n                        return new Date(x.dateSubmitted) >= minDate\n                    }).sort((a, b) => { return new Date(a.dateSubmitted) - new Date(b.dateSubmitted) });\n\n                    var _timePeriods = getDateDiffList(\"day\", minDate, maxDate).map(x => { return moment(x).format(\"MM/DD/YYYY\") });\n                    var groupedObj = {};\n                    var chartDataObj = {};\n                    var categoryObj = {};\n\n                    filteredData.forEach(item => {\n                        var monthDayYear = moment(item.dateSubmitted).format(\"MM/DD/YYYY\")\n                        var playerNames = chain(item.players).map(function (user) { return user.name }).value().join(\",\");\n\n                        groupedObj[monthDayYear] = groupedObj[monthDayYear] || [];\n                        groupedObj[monthDayYear].push({ primaryTimeMilliseconds: item.primaryTimeMilliseconds, primaryTimeString: item.primaryTimeString, playerNames: playerNames });\n                    });\n\n                    if (Object.keys(groupedObj).length > 0) {\n                        var minKey = 'Min Time';\n                        chartDataObj[minKey] = {};\n                        for (var key in groupedObj) {\n                            chartDataObj[minKey][key] = chartDataObj[minKey][key] || [];\n\n                            var minItem = groupedObj[key].sort((a, b) => { return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds })[0];\n                            chartDataObj[minKey][key] = { value: minItem.primaryTimeMilliseconds, tooltext: key + \"{br}\" + minItem.playerNames + \"{br}\" + minItem.primaryTimeString };\n                        }\n\n                        categoryObj[\"category\"] = _timePeriods.map(item => {\n                            var labelObj = {};\n                            labelObj[\"label\"] = item\n                            return labelObj;\n                        });\n                        categories.push(categoryObj);\n\n                        for (var key in chartDataObj) {\n                            _timePeriods.forEach(timePeriod => {\n                                if (!chartDataObj[key].hasOwnProperty(timePeriod)) {\n                                    chartDataObj[key][timePeriod] = { value: null, tooltext: ' ' };\n                                }\n                            })\n                        }\n                    }\n\n                    for (var key in chartDataObj) {\n                        var data = chain(Object.entries(chartDataObj[key])).map(function (x) { return { category: x[0], value: x[1]?.value, tooltext: x[1]?.tooltext } }).value();\n                        if (data.length > 0) {\n                            data = data.sort((a, b) => {\n                                var monthdayyeara = a.category.split(\"/\");\n                                var monthdayyearb = b.category.split(\"/\");\n\n                                return new Date(monthdayyeara[2], monthdayyeara[0] - 1, monthdayyeara[1]) - new Date(monthdayyearb[2], monthdayyearb[0] - 1, monthdayyearb[1]);\n                            });\n                            dataset.push({ seriesname: key, data: data });\n                        }\n                    }\n                }\n\n                const chartConfig = {\n                    type: \"msline\",\n                    renderAt: container,\n                    width: \"100%\",\n                    dataFormat: \"json\",\n                    dataSource: {\n                        chart: {\n                            caption: 'Personal Best Progression',\n                            subCaption: 'Per Day',\n                            subcaptionFontSize: 12,\n                            xAxis: 'Date',\n                            yAxis: 'Time (Minutes)',\n                            labelDisplay: \"rotate\",\n                            labelFontSize: 12,\n                            exportEnabled: 0,\n                            showValues: 0,\n                            formatNumberScale: 1,\n                            numberOfDecimals: 0,\n                            useRoundEdges: 1,\n                            numberscalevalue: \"1000,60,60\",\n                            numberscaleunit: \"s,m,h\",\n                            defaultnumberscale: \"ms\",\n                            scalerecursively: \"1\",\n                            maxscalerecursion: \"-1\",\n                            scaleseparator: \" \",\n                            connectNullData: 1,\n                            plotBinSize: 1,\n                            setAdaptiveYMin: 1,\n                            theme: \"candy\",\n                            bgColor: \"#303030\",\n                            baseFontColor: \"#fff\",\n                            outCnvBaseFontColor: \"#fff\"\n                        },\n                        categories: categories,\n                        dataset: dataset\n                    }\n                };\n\n                return chartConfig;\n            },\n            getSpeedRunsPercentileChart(container) {\n                var dataset = [];\n\n                if (this.tabledata?.length > 0) {\n                    var _data = chain(this.tabledata).clone().value();\n                    var allSpeedRunTimes = _data.sort((a, b) => { return a?.PrimaryTimeMilliseconds - b?.PrimaryTimeMilliseconds; });\n\n                    var chartDataObj = {};\n                    var percIncrement = 5;\n                    var maxPerc = 25;\n                    var showEvery = 2;\n                    var maxNumCategories = Math.round((100 / percIncrement) / showEvery) + 1;\n\n                    var prevPercNum = null;\n                    var prevIndex = null;\n                    var prevTime = null;\n\n                    var prevTotal = 0;\n                    for (var i = 0; i < maxNumCategories; i++) {\n                        var percNum = (i == 0) ? percIncrement : prevPercNum + (percIncrement * showEvery);\n                        var index = Math.ceil((allSpeedRunTimes.length + 1) * (percNum / 100));\n                        index = ((index > 0) ? index - 1 : 0);// + ((prevIndex > 0) ? prevIndex - 1 : 0)\n\n                        var time;\n                        var key;\n                        var percent;\n                        var values = allSpeedRunTimes.filter((x, i) => { return i <= index });\n\n                        if (index >= allSpeedRunTimes.length - 1 || percNum > maxPerc || i == (maxNumCategories - 1)) {\n                            values = allSpeedRunTimes.filter((x, i) => { return i >= prevTotal });\n                            percent = Math.trunc((values.length / allSpeedRunTimes.length) * 100) || 0;\n                            key = '> ' + formatTime(\"milliseconds\", prevTime) + \" (\" + percent + \"% - \" + values.length + \"/\" + allSpeedRunTimes.length + \")\";\n                            chartDataObj[key] = values;\n                            break;\n                        } else {\n                            time = allSpeedRunTimes[index].primaryTimeMilliseconds;\n                            percent = Math.trunc((values.length / allSpeedRunTimes.length) * 100) || 0;\n                            key = '<= ' + formatTime(\"milliseconds\", time) + \" (\" + percent + \"% - \" + values.length + \"/\" + allSpeedRunTimes.length + \")\";\n\n                            if (index != prevIndex) {\n                                chartDataObj[key] = values;\n                            }\n                        }\n\n                        prevTotal = values.length - 1;\n                        prevPercNum = percNum;\n                        prevIndex = index;\n                        prevTime = time;\n                    }\n\n                    dataset = Object.entries(chartDataObj)\n                        .map(x => {\n                            return { label: x[0], value: x[1].length }\n                        });\n                }\n\n                const chartConfig = {\n                    type: \"pie3d\",\n                    renderAt: container,\n                    width: \"100%\",\n                    dataFormat: \"json\",\n                    dataSource: {\n                        chart: {\n                            caption: 'Time Percentiles',\n                            subCaption: '',\n                            showValues: 1,\n                            legendItemFontSize: 12,\n                            formatNumberScale: 0,\n                            numberOfDecimals: 0,\n                            showPercentValues: 0,\n                            showPercentInTooltip: 0,\n                            exportEnabled: 0,\n                            showLegend: 1,\n                            showLabels: 0,\n                            theme: \"candy\",\n                            bgColor: \"#303030\",\n                            baseFontColor: \"#fff\",\n                            outCnvBaseFontColor: \"#fff\"\n                        },\n                        data: dataset\n                    }\n                };\n\n                return chartConfig;\n            },\n            getTopSpeedRunChart(container, isGame) {\n                var categories = [];\n                var dataset = [];\n\n                if (this.tabledata?.length > 0) {\n                    var _data = chain(this.tabledata).clone().value();\n\n                    if (isGame) {\n                        _data = _data.filter(x => x.rank);\n                    }\n\n                    var sortedData = _data.sort((a, b) => { return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds; });\n                    var data = sortedData.slice(0, 10);\n\n                    var chartDataObj = {};\n                    var categoryObj = {};\n                    data.forEach(item => {\n                        var playerNames = chain(item.players).map(function (item) { return item.name }).value().join(\"{br}\");\n\n                        chartDataObj[playerNames] = item.primaryTimeMilliseconds;\n                    });\n\n                    categoryObj[\"category\"] = data.map(item => {\n                        var labelObj = {};\n                        labelObj[\"label\"] = item.players?.map(item => {\n                            return item.name;\n                        }).join(\"{br}\");\n                        return labelObj;\n                    });\n                    categories.push(categoryObj);\n\n                    var dataValues = data.map(item => {\n                        return { value: item.primaryTimeMilliseconds };\n                    });\n\n                    dataset.push({ seriesname: '', data: dataValues });\n                }\n\n                const chartConfig = {\n                    type: \"stackedBar2D\",\n                    renderAt: container,\n                    width: \"100%\",\n                    dataFormat: \"json\",\n                    dataSource: {\n                        chart: {\n                            caption: isGame ? 'Top 10 Ranked' : 'Top 10',\n                            subCaption: '',\n                            xAxis: '',\n                            yAxis: 'Time (Minutes)',\n                            labelFontSize: 12,\n                            labelVAlign: 'middle',\n                            exportEnabled: 0,\n                            showValues: 1,\n                            formatNumberScale: 1,\n                            numberOfDecimals: 0,\n                            useRoundEdges: 1,\n                            numberscalevalue: \"1000,60,60\",\n                            numberscaleunit: \"s,m,h\",\n                            defaultnumberscale: \"ms\",\n                            scalerecursively: \"1\",\n                            maxscalerecursion: \"-1\",\n                            scaleseparator: \"\",\n                            theme: \"candy\",\n                            bgColor: \"#303030\",\n                            baseFontColor: \"#fff\",\n                            outCnvBaseFontColor: \"#fff\"\n                        },\n                        categories: categories,\n                        dataset: dataset\n                    }\n                };\n\n                return chartConfig;\n            }\n        }\n    }\n</script>\n<style scoped>\n   :deep(.fusioncharts-container>svg>g:nth-of-type(2)) {\n        display:none !important;\n    }\n</style>\n\n\n\n\n"],"names":[],"sourceRoot":""}