{"version":3,"file":"master.min.css","mappings":";AAuPI;QACI,yBAAyB;QACzB,eAAe;QACf,iBAAiB;AACrB;;AAEJ;;;CAGC;AACE;QACK,0BAA0B;QAC1B,iBAAiB;QACjB,iBAAiB;AACrB;;;ACgED;QACK,uBAAuB;AAC3B","sources":["webpack://speed-run-app.ui/./src/components/SpeedRunGridTabVue.vue","webpack://speed-run-app.ui/./src/components/SpeedRunGridChartVue.vue"],"sourcesContent":["<template>\n    <div v-if=\"!loading\" id=\"divGridContainer\" class=\"container-lg m-0 p-0\">\n        <div v-if=\"!isgame\" class=\"row no-gutters pl-3 pr-1 pt-1 pb-0\">\n            <div class=\"col-sm-1 align-self-top pt-1\">\n                <label class=\"tab-row-name\">Game:</label>\n            </div>\n            <div class=\"col pl-2 tab-list\">\n                <ul class=\"nav nav-pills\">\n                    <li class=\"nav-item p-1\" v-for=\"(game, gameIndex) in items\" :key=\"game.id\">\n                        <a class=\"game nav-link p-2\" :class=\"{ 'active' : gameID == game.id }\" href=\"#/\" :data-value=\"game.id\" data-toggle=\"pill\" @click=\"onGameClick\">{{ game.name }}</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <div v-for=\"(game, gameIndex) in items\" :key=\"game.id\">\n            <div v-if=\"gameID == game.id\">\n                <div class=\"row no-gutters pl-3 pr-1 pt-1 pb-0 pr-0\">\n                    <div class=\"col-sm-1 align-self-top pt-1\">\n                        <label class=\"tab-row-name\">Category Type:</label>\n                    </div>\n                    <div class=\"col pl-2 tab-list\">\n                        <ul class=\"nav nav-pills\">\n                            <li class=\"nav-item p-1\" v-for=\"(categoryType, categoryTypeIndex) in game.categoryTypes\" :key=\"categoryType.id\">\n                                <a class=\"categoryType nav-link p-2\" :class=\"{ 'active' : categoryTypeID == categoryType.id }\" :data-value=\"categoryType.id\" href=\"#/\" data-toggle=\"pill\" @click=\"onCategoryTypeClick\">{{ categoryType.name }}</a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div v-for=\"(categoryType, categoryTypeIndex) in game.categoryTypes\" :key=\"categoryType.id\">\n                    <div v-if=\"categoryTypeID == categoryType.id\">\n                        <div class=\"row no-gutters pl-3 pr-1 pt-1 pb-0 pr-0\">\n                            <div class=\"col-sm-1 align-self-top pt-1\">\n                                <label class=\"tab-row-name\">Category:</label>\n                            </div>\n                            <div class=\"col pl-2 tab-list\">\n                                <ul class=\"nav nav-pills\">\n                                    <li class=\"nav-item p-1\" v-for=\"(category, categoryIndex) in game.categories.filter(ctg => ctg.categoryTypeID == categoryType.id)\" :key=\"category.id\">\n                                        <a class=\"category nav-link p-2\" :class=\"{ 'active' : categoryID == category.id }\" :data-value=\"category.id\" href=\"#/\" data-toggle=\"pill\" @click=\"onCategoryClick\">{{ category.name }}</a>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                        <div v-for=\"(category, categoryIndex) in game.categories.filter(ctg => ctg.categoryTypeID == categoryType.id)\" :key=\"category.id\">\n                            <div v-if=\"categoryID == category.id\">\n                                <div v-if=\"categoryTypeID == 0\">\n                                    <div v-if=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1')).length > 0\">\n                                        <speedrun-grid-tab-variable :items=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1'))\" :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"''\" :variablevalueids=\"variableValueIDs\" :userid=\"userID\" :prevdata=\"''\" @variablevalueclick=\"onVariableValueClick\"></speedrun-grid-tab-variable>\n                                    </div>\n                                    <div v-else>\n                                        <speedrun-grid :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"''\" :variablevalues=\"''\" :userid=\"userID\"></speedrun-grid>\n                                    </div>\n                                </div>\n                                <div v-else>\n                                    <div class=\"row no-gutters pl-3 pr-1 pt-1 pb-0 pr-0\">\n                                        <div class=\"col-sm-1 align-self-top pt-1\">\n                                            <label class=\"tab-row-name\">Level:</label>\n                                        </div>\n                                        <div class=\"col pl-2 tab-list\">\n                                            <ul class=\"nav nav-pills\">\n                                                <li class=\"nav-item p-1\" v-for=\"(level, levelIndex) in game.levels\" :key=\"level.id\">\n                                                    <a class=\"level nav-link p-2\" :class=\"{ 'active' : levelID == level.id }\" href=\"#/\" :data-value=\"level.id\" data-toggle=\"pill\" @click=\"onLevelClick\">{{ level.name }}</a>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                    <div v-for=\"(level, levelIndex) in game.levels\" :key=\"level.id\">\n                                        <div v-if=\"levelID == level.id\">\n                                            <div v-if=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && variable.levelID == level.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3')).length > 0\">\n                                                <speedrun-grid-tab-variable :items=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && variable.levelID == level.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3'))\" :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"''\" :variablevalueids=\"variableValueIDs\" :userid=\"userID\" :prevdata=\"''\" @variablevalueclick=\"onVariableValueClick\"></speedrun-grid-tab-variable>\n                                            </div>\n                                            <div v-else>\n                                                <speedrun-grid :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"level.id.toString()\" :variablevalues=\"''\" :userid=\"userID\"></speedrun-grid>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import axios from 'axios';\n\n    export default {\n        name: \"SpeedRunGridTabVue\",\n        props: {\n            isgame: Boolean,\n            id: String\n        },\n        data() {\n            return {\n                items: [],\n                selected: [],\n                gameID: '',\n                categoryTypeID: '',\n                categoryID: '',\n                levelID: '',\n                variableValueIDs: {},\n                loading: true\n            }\n        },\n        computed: {\n            userID: function () {\n                return this.isgame ? '' : this.id;\n            }\n        },\n        created: function () {\n            this.loadData();\n        },\n        methods: {\n            loadData() {\n                var that = this;\n                this.loading = true;\n\n                var prms = axios.get('../Game/GetSpeedRunGridTabs', { params: { ID: this.id, isGame: this.isgame } })\n                                .then(res => {\n                                    that.items = res.data.tabItems;\n                                    that.gameID = res.data.gameID;\n                                    that.categoryTypeID = res.data.categoryTypeID;\n                                    that.categoryID = res.data.categoryID;\n                                    that.levelID = res.data.levelID;\n                                    that.variableValueIDs = res.data.variableValueIDs;\n                                    that.initSelected();\n                                    that.loading = false;\n                                    return res;\n                                })\n                                .catch(err => { console.error(err); return Promise.reject(err); });\n\n                return prms;\n            },\n            initSelected: function () {\n                var that = this;\n                this.gameID = this.gameID || this.items[0].id;\n\n                var game = this.items.find(game => game.id == that.gameID);\n\n                this.categoryTypeID = this.categoryTypeID || game.categoryTypes[0].id;\n\n                this.categoryID = this.categoryID || game.categories.find(category => category.categoryTypeID == that.categoryTypeID).id;\n\n                if (this.categoryTypeID == 1) {\n                    this.levelID = this.levelID || (game.levels ? game.levels[0].id : '');\n                } else {\n                    this.levelID = '';\n                }\n\n                if (!this.variableValueIDs) {\n                    this.variableValueIDs = {};\n                    if (this.categoryTypeID == 0) {\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1'))\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id })\n\n                    } else if (this.categoryTypeID == 1) {\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3'))\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id })\n                    }\n                }\n            },\n            resetSelected: function () {\n                var that = this;\n                var game = this.items.find(game => game.id == that.gameID);\n\n                var categoryTypeID = this.selected.find(item => item.gameID == that.gameID && item.type == 'categorytype')?.categoryTypeID;\n                this.categoryTypeID = categoryTypeID || game.categoryTypes[0].id;\n\n                var categoryID = this.selected.find(item => item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.type == 'category')?.categoryID;\n                this.categoryID = categoryID || game.categories.find(category => category.categoryTypeID == that.categoryTypeID).id;\n\n                if (this.categoryTypeID == 1) {\n                    var levelID = this.selected.find(item => item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && item.type == 'level')?.levelID;\n                    this.levelID = levelID || (game.levels ? game.levels[0].id : '');\n                } else {\n                    this.levelID = '';\n                }\n\n                var variableValueIDs = this.selected.find(item => item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && (!that.levelID || item.levelID == that.levelID) && item.type == 'variable')?.variableValueIDs;\n                if (variableValueIDs) {\n                    var variableVauleIDsCopy = Object.assign({}, variableValueIDs);\n                    this.variableValueIDs = variableVauleIDsCopy;\n                } else {\n                    if (this.categoryTypeID == 0) {\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1'))\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id });\n                    } else {\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && variable.levelID == that.levelID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3'))\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id });\n                    }\n                }\n            },\n            onGameClick: function (event) {\n                var value = event.target.getAttribute('data-value');\n                this.gameID = value;\n\n                this.resetSelected();\n            },\n            onCategoryTypeClick: function (event) {\n                var value = event.target.getAttribute('data-value');\n                this.categoryTypeID = value;\n\n                var that = this;\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.type == 'categorytype'));\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, type: 'categorytype' });\n\n                this.resetSelected();\n            },\n            onCategoryClick: function (event) {\n                var value = event.target.getAttribute('data-value');\n                this.categoryID = value;\n\n                var that = this;\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.type == 'category'));\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, categoryID: this.categoryID, type: 'category' });\n\n\n                this.resetSelected();\n            },\n            onLevelClick: function (event) {\n                var value = event.target.getAttribute('data-value');\n                this.levelID = value;\n\n                var that = this;\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && item.type == 'level'));\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, categoryID: this.categoryID, levelID: this.levelID, type: 'level' });\n\n                this.resetSelected();\n            },\n            onVariableValueClick: function (event) {\n                var variableID = event.target.getAttribute('data-variable');\n                var value = event.target.getAttribute('data-value');\n                this.variableValueIDs[variableID] = value;\n\n                var that = this;\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && (!item.levelID || item.levelID == that.levelID) && item.type == 'variable'));\n\n                var variableValueIDsCopy = Object.assign({}, this.variableValueIDs);\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, categoryID: this.categoryID, levelID: this.levelID, variableValueIDs: variableValueIDsCopy, type: 'variable' });\n\n                this.resetSelected();\n            }\n        }\n    };\n</script>\n<style>\n    .tab-list .nav-link {\n        background-color: #313131;\n        font-size: 13px;\n        font-weight: bold;\n    }\n\n/*    .tab-list .nav-link:hover {\n        background-color: #2b2a2a;\n    }\n*/\n   .tab-row-name {\n        font-size: 14px !important;\n        line-height: 18px;\n        font-weight: bold;\n    } \n</style>\n\n\n\n\n","<template>\n    <div class=\"card\">\n        <div class=\"card-header\" id=\"headingOne\">\n            <h5 class=\"mb-0\">\n                <div v-if=\"showCharts\">\n                    <a class=\"btn btn-link font-weight-bold\" href=\"#/\" @click=\"showCharts = !showCharts\"><i class=\"fa fa-chevron-down\"></i>&nbsp;&nbsp;Hide Charts</a>\n                </div>\n                <div v-else>\n                    <a class=\"btn btn-link font-weight-bold\" href=\"#/\" @click=\"showCharts = !showCharts\"><i class=\"fa fa-chevron-right\"></i>&nbsp;&nbsp;Show Charts</a>               \n                </div>\n            </h5>\n        </div>\n        <div class=\"container row\" :style=\"[ showCharts ? null : { display:'none' } ]\">\n            <div class=\"col-sm-4\">\n                <div id=\"divGameSpeedRunsByMonthChart\"></div>\n            </div>\n            <div class=\"col-sm-4\">\n                <div id=\"divGameSpeedRunsPercentileChart\"></div>\n            </div>\n            <div class=\"col-sm-4\">\n                <div id=\"divGameTopSpeedRunChart\"></div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import moment from 'moment';\n    import _ from 'lodash';\n    import { getDateDiffList, formatTime } from '../js/common.js';\n\n    export default {\n        name: \"SpeedRunGridChartsVue\",\n        props: {\n            tabledata: Array\n        },\n        data() {\n            return {\n                showCharts: false\n            }\n        },\n        created: function () {\n            this.loadData();\n        },\n        methods: {\n            loadData() {\n                var that = this;\n                FusionCharts.ready(function () {\n                    var gameSpeedRunsByMonthChart = new FusionCharts(that.getGameSpeedRunsByMonthChart());\n                    var gameSpeedRunsPercentileChart = new FusionCharts(that.getGameSpeedRunsPercentileChart());\n                    var gameTopSpeedRunChart = new FusionCharts(that.getGameTopSpeedRunChart());\n\n                    gameSpeedRunsByMonthChart.render();\n                    gameSpeedRunsPercentileChart.render();\n                    gameTopSpeedRunChart.render();\n                });\n            },\n            getGameSpeedRunsByMonthChart() {\n                var that = this;\n                var categories = [];\n                var dataset = [];\n\n                if (this.tabledata?.length > 0) {\n                    var _data = _.chain(this.tabledata).clone().value();\n                    var dates = _data.map(item => { return new Date(item.dateSubmitted) });\n                    var maxDate = moment(Math.max.apply(null, dates)).toDate();\n                    var minDate = moment(maxDate).add(-24, \"months\").toDate();\n                    var minDataDate = moment(Math.min.apply(null, dates)).toDate();\n                    minDate = minDataDate > minDate ? minDataDate : minDate;\n\n                    var filteredData = _data.filter((x, i) => {\n                        return new Date(x.dateSubmitted) >= minDate\n                    }).sort((a, b) => { return new Date(a.dateSubmitted) - new Date(b.dateSubmitted) });\n\n                    var timePeriods = getDateDiffList(\"month\", minDate, maxDate).map(x => { return moment(x).format(\"MM/YYYY\") });\n\n                    var _timePeriods = _.chain(timePeriods).clone().value();\n                    var groupedObj = {};\n                    var chartDataObj = {};\n                    var categoryObj = {};\n\n                    filteredData.forEach(item => {\n                        var monthYear = item.monthYearSubmitted;\n\n                        groupedObj[monthYear] = groupedObj[monthYear] || [];\n                        groupedObj[monthYear].push(item.primaryTimeMilliseconds);\n                    });\n\n                    if (Object.keys(groupedObj).length > 0) {\n                        var minKey = 'Min Time';\n                        chartDataObj[minKey] = {};\n                        for (var key in groupedObj) {\n                            chartDataObj[minKey][key] = chartDataObj[minKey][key] || [];\n\n                            var min = Math.min.apply(null, groupedObj[key]);\n                            chartDataObj[minKey][key] = min;\n                        }\n\n                        categoryObj[\"category\"] = _timePeriods.map(item => {\n                            var labelObj = {};\n                            labelObj[\"label\"] = item\n                            return labelObj;\n                        });\n                        categories.push(categoryObj);\n\n                        for (var key in chartDataObj) {\n                            _timePeriods.forEach(timePeriod => {\n                                if (!chartDataObj[key].hasOwnProperty(timePeriod)) {\n                                    chartDataObj[key][timePeriod] = null;\n                                }\n                            })\n                        }\n                    }\n\n                    for (var key in chartDataObj) {\n                        var data = _.chain(Object.entries(chartDataObj[key])).map(function (x) { return { category: x[0], value: x[1] } }).value();\n                        if (data.length > 0) {\n                            data = data.sort((a, b) => {\n                                var monthyeara = a.category.split(\"/\");\n                                var monthyearb = b.category.split(\"/\");\n\n                                return new Date(monthyeara[1], monthyeara[0] - 1) - new Date(monthyearb[1], monthyearb[0] - 1)\n                            });\n                            dataset.push({ seriesname: key, data: data });\n                        }\n                    }\n                }\n\n                const chartConfig = {\n                    type: \"msline\",\n                    renderAt: \"divGameSpeedRunsByMonthChart\",\n                    width: \"100%\",\n                    //height: \"350\",\n                    dataFormat: \"json\",\n                    dataSource: {\n                        chart: {\n                            caption: 'Fastest Per Month',\n                            subCaption: 'Last 2 Years',\n                            xAxis: 'Date',\n                            yAxis: 'Time (Minutes)',\n                            exportEnabled: 0,\n                            showValues: 0,\n                            formatNumberScale: 1,\n                            numberOfDecimals: 0,\n                            useRoundEdges: 1,\n                            numberscalevalue: \"1000,60,60\",\n                            numberscaleunit: \"s,m,h\",\n                            defaultnumberscale: \"ms\",\n                            scalerecursively: \"1\",\n                            maxscalerecursion: \"-1\",\n                            scaleseparator: \" \",\n                            connectNullData: 1,\n                            setAdaptiveYMin: 1,\n                            theme: \"candy\",\n                            bgColor: \"#303030\",\n                            baseFontColor: \"#fff\",\n                            outCnvBaseFontColor: \"#fff\"\n                        },\n                        categories: categories,\n                        dataset: dataset\n                    }\n                };\n\n                return chartConfig;\n            },\n            getGameSpeedRunsPercentileChart() {\n                var that = this;\n                var dataset = [];\n\n                if (this.tabledata?.length > 0) {\n                    var _data = _.chain(this.tabledata).clone().value();\n                    var allSpeedRunTimes = _data.sort((a, b) => { return a?.PrimaryTimeMilliseconds - b?.PrimaryTimeMilliseconds; });\n\n                    var chartDataObj = {};\n                    var percIncrement = 5;\n                    var maxPerc = 25;\n                    var showEvery = 2;\n                    var maxNumCategories = Math.round((100 / percIncrement) / showEvery) + 1;\n\n                    var prevPercNum = null;\n                    var prevIndex = null;\n                    var prevTime = null;\n\n                    var prevTotal = 0;\n                    for (var i = 0; i < maxNumCategories; i++) {\n                        var percNum = (i == 0) ? percIncrement : prevPercNum + (percIncrement * showEvery);\n                        var index = Math.ceil((allSpeedRunTimes.length + 1) * (percNum / 100));\n                        index = ((index > 0) ? index - 1 : 0);// + ((prevIndex > 0) ? prevIndex - 1 : 0)\n\n                        var time;\n                        var key;\n                        var percent;\n                        var values = allSpeedRunTimes.filter((x, i) => { return i <= index });\n\n                        if (index >= allSpeedRunTimes.length - 1 || percNum > maxPerc || i == (maxNumCategories - 1)) {\n                            values = allSpeedRunTimes.filter((x, i) => { return i >= prevTotal });\n                            percent = Math.trunc((values.length / allSpeedRunTimes.length) * 100) || 0;\n                            key = '> ' + formatTime(\"milliseconds\", prevTime) + \" (\" + percent + \"% - \" + values.length + \"/\" + allSpeedRunTimes.length + \")\";\n                            chartDataObj[key] = values;\n                            break;\n                        } else {\n                            time = allSpeedRunTimes[index].primaryTimeMilliseconds;\n                            percent = Math.trunc((values.length / allSpeedRunTimes.length) * 100) || 0;\n                            key = '<= ' + formatTime(\"milliseconds\", time) + \" (\" + percent + \"% - \" + values.length + \"/\" + allSpeedRunTimes.length + \")\";\n\n                            if (index != prevIndex) {\n                                chartDataObj[key] = values;\n                            }\n                        }\n\n                        prevTotal = values.length - 1;\n                        prevPercNum = percNum;\n                        prevIndex = index;\n                        prevTime = time;\n                    }\n\n                    dataset = Object.entries(chartDataObj)\n                        .map(x => {\n                            return { label: x[0], value: x[1].length }\n                        });\n                }\n\n                const chartConfig = {\n                    type: \"pie3d\",\n                    renderAt: \"divGameSpeedRunsPercentileChart\",\n                    width: \"100%\",\n                    //height: \"350\",\n                    dataFormat: \"json\",\n                    dataSource: {\n                        chart: {\n                            caption: 'Time Percentiles',\n                            subCaption: 'All Time',\n                            showValues: 1,\n                            formatNumberScale: 0,\n                            numberOfDecimals: 0,\n                            showPercentValues: 0,\n                            showPercentInTooltip: 0,\n                            exportEnabled: 0,\n                            showLegend: 1,\n                            showLabels: 0,\n                            theme: \"candy\",\n                            bgColor: \"#303030\",\n                            baseFontColor: \"#fff\",\n                            outCnvBaseFontColor: \"#fff\"\n                        },\n                        data: dataset\n                    }\n                };\n\n                return chartConfig;\n            },\n            getGameTopSpeedRunChart() {\n                var that = this;\n                var categories = [];\n                var dataset = [];\n\n                if (this.tabledata?.length > 0) {\n                    var _data = _.chain(this.tabledata).clone().value();\n                    var sortedData = _data.sort((a, b) => { return a?.PrimaryTimeMilliseconds - b?.PrimaryTimeMilliseconds; });\n                    var data = sortedData.slice(0, 10);\n\n                    var chartDataObj = {};\n                    var categoryObj = {};\n                    data.forEach(item => {\n                        var playerNames = _.chain(item.players).map(function (item) { return item.name }).value().join(\",\");\n\n                        chartDataObj[playerNames] = chartDataObj[playerNames] || [];\n                        chartDataObj[playerNames] = item.primaryTimeMilliseconds;\n                    });\n\n                    categoryObj[\"category\"] = data.map(item => {\n                        var labelObj = {};\n                        labelObj[\"label\"] = item.players?.map(item => {\n                            return item.name;\n                        }).join(\",\");\n                        return labelObj;\n                    });\n                    categories.push(categoryObj);\n\n                    var dataValues = [];\n                    for (var key in chartDataObj) {\n                        dataValues.push({ value: chartDataObj[key] });\n                    }\n\n                    dataset.push({ seriesname: '', data: dataValues });\n                }\n\n                const chartConfig = {\n                    type: \"stackedBar2D\",\n                    renderAt: \"divGameTopSpeedRunChart\",\n                    width: \"100%\",\n                    //height: \"350\",\n                    dataFormat: \"json\",\n                    dataSource: {\n                        chart: {\n                            caption: 'Top 10 Runs',\n                            subCaption: '',\n                            xAxis: '',\n                            yAxis: 'Time (Minutes)',\n                            exportEnabled: 0,\n                            showValues: 1,\n                            formatNumberScale: 1,\n                            numberOfDecimals: 0,\n                            useRoundEdges: 1,\n                            numberscalevalue: \"1000,60,60\",\n                            numberscaleunit: \"s,m,h\",\n                            defaultnumberscale: \"ms\",\n                            scalerecursively: \"1\",\n                            maxscalerecursion: \"-1\",\n                            scaleseparator: \"\",\n                            theme: \"candy\",\n                            bgColor: \"#303030\",\n                            baseFontColor: \"#fff\",\n                            outCnvBaseFontColor: \"#fff\"\n                        },\n                        categories: categories,\n                        dataset: dataset\n                    }\n                };\n\n                return chartConfig;\n            }\n        }\n    }\n</script>\n<style>\n   .fusioncharts-container>svg>g:nth-of-type(2){\n        display:none !important;\n    }\n</style>\n\n\n\n\n"],"names":[],"sourceRoot":""}