{"version":3,"file":"master.min.css","mappings":";AAuPI;QACI,yBAAyB;QACzB,eAAe;QACf,iBAAiB;AACrB;;AAEJ;;;CAGC;AACE;QACK,0BAA0B;QAC1B,iBAAiB;QACjB,iBAAiB;AACrB;;;;;;AC0MD;QACK,uBAAuB;AAC3B","sources":["webpack://speed-run-app.ui/./src/components/SpeedRunGridTabVue.vue","webpack://speed-run-app.ui/./src/components/SpeedRunGridChartVue.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"!loading\" id=\"divGridContainer\" class=\"container-lg m-0 p-0\">\r\n        <div v-if=\"!isgame\" class=\"row no-gutters pl-3 pr-1 pt-1 pb-0\">\r\n            <div class=\"col-sm-1 align-self-top pt-1\">\r\n                <label class=\"tab-row-name\">Game:</label>\r\n            </div>\r\n            <div class=\"col pl-2 tab-list\">\r\n                <ul class=\"nav nav-pills\">\r\n                    <li class=\"nav-item p-1\" v-for=\"(game, gameIndex) in items\" :key=\"game.id\">\r\n                        <a class=\"game nav-link p-2\" :class=\"{ 'active' : gameID == game.id }\" href=\"#/\" :data-value=\"game.id\" data-toggle=\"pill\" @click=\"onGameClick\">{{ game.name }}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div v-for=\"(game, gameIndex) in items\" :key=\"game.id\">\r\n            <div v-if=\"gameID == game.id\">\r\n                <div class=\"row no-gutters pl-3 pr-1 pt-1 pb-0 pr-0\">\r\n                    <div class=\"col-sm-1 align-self-top pt-1\">\r\n                        <label class=\"tab-row-name\">Category Type:</label>\r\n                    </div>\r\n                    <div class=\"col pl-2 tab-list\">\r\n                        <ul class=\"nav nav-pills\">\r\n                            <li class=\"nav-item p-1\" v-for=\"(categoryType, categoryTypeIndex) in game.categoryTypes\" :key=\"categoryType.id\">\r\n                                <a class=\"categoryType nav-link p-2\" :class=\"{ 'active' : categoryTypeID == categoryType.id }\" :data-value=\"categoryType.id\" href=\"#/\" data-toggle=\"pill\" @click=\"onCategoryTypeClick\">{{ categoryType.name }}</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <div v-for=\"(categoryType, categoryTypeIndex) in game.categoryTypes\" :key=\"categoryType.id\">\r\n                    <div v-if=\"categoryTypeID == categoryType.id\">\r\n                        <div class=\"row no-gutters pl-3 pr-1 pt-1 pb-0 pr-0\">\r\n                            <div class=\"col-sm-1 align-self-top pt-1\">\r\n                                <label class=\"tab-row-name\">Category:</label>\r\n                            </div>\r\n                            <div class=\"col pl-2 tab-list\">\r\n                                <ul class=\"nav nav-pills\">\r\n                                    <li class=\"nav-item p-1\" v-for=\"(category, categoryIndex) in game.categories.filter(ctg => ctg.categoryTypeID == categoryType.id)\" :key=\"category.id\">\r\n                                        <a class=\"category nav-link p-2\" :class=\"{ 'active' : categoryID == category.id }\" :data-value=\"category.id\" href=\"#/\" data-toggle=\"pill\" @click=\"onCategoryClick\">{{ category.name }}</a>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div v-for=\"(category, categoryIndex) in game.categories.filter(ctg => ctg.categoryTypeID == categoryType.id)\" :key=\"category.id\">\r\n                            <div v-if=\"categoryID == category.id\">\r\n                                <div v-if=\"categoryTypeID == 0\">\r\n                                    <div v-if=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1')).length > 0\">\r\n                                        <speedrun-grid-tab-variable :items=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1'))\" :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"''\" :variablevalueids=\"variableValueIDs\" :userid=\"userID\" :prevdata=\"''\" @variablevalueclick=\"onVariableValueClick\"></speedrun-grid-tab-variable>\r\n                                    </div>\r\n                                    <div v-else>\r\n                                        <speedrun-grid :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"''\" :variablevalues=\"''\" :userid=\"userID\"></speedrun-grid>\r\n                                    </div>\r\n                                </div>\r\n                                <div v-else>\r\n                                    <div class=\"row no-gutters pl-3 pr-1 pt-1 pb-0 pr-0\">\r\n                                        <div class=\"col-sm-1 align-self-top pt-1\">\r\n                                            <label class=\"tab-row-name\">Level:</label>\r\n                                        </div>\r\n                                        <div class=\"col pl-2 tab-list\">\r\n                                            <ul class=\"nav nav-pills\">\r\n                                                <li class=\"nav-item p-1\" v-for=\"(level, levelIndex) in game.levels\" :key=\"level.id\">\r\n                                                    <a class=\"level nav-link p-2\" :class=\"{ 'active' : levelID == level.id }\" href=\"#/\" :data-value=\"level.id\" data-toggle=\"pill\" @click=\"onLevelClick\">{{ level.name }}</a>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div v-for=\"(level, levelIndex) in game.levels\" :key=\"level.id\">\r\n                                        <div v-if=\"levelID == level.id\">\r\n                                            <div v-if=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && variable.levelID == level.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3')).length > 0\">\r\n                                                <speedrun-grid-tab-variable :items=\"game.subCategoryVariablesTabs?.filter(variable => variable.categoryID == category.id && variable.levelID == level.id && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3'))\" :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"''\" :variablevalueids=\"variableValueIDs\" :userid=\"userID\" :prevdata=\"''\" @variablevalueclick=\"onVariableValueClick\"></speedrun-grid-tab-variable>\r\n                                            </div>\r\n                                            <div v-else>\r\n                                                <speedrun-grid :gameid=\"game.id.toString()\" :categorytypeid=\"categoryType.id.toString()\" :categoryid=\"category.id.toString()\" :levelid=\"level.id.toString()\" :variablevalues=\"''\" :userid=\"userID\"></speedrun-grid>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import axios from 'axios';\r\n\r\n    export default {\r\n        name: \"SpeedRunGridTabVue\",\r\n        props: {\r\n            isgame: Boolean,\r\n            id: String\r\n        },\r\n        data() {\r\n            return {\r\n                items: [],\r\n                selected: [],\r\n                gameID: '',\r\n                categoryTypeID: '',\r\n                categoryID: '',\r\n                levelID: '',\r\n                variableValueIDs: {},\r\n                loading: true\r\n            }\r\n        },\r\n        computed: {\r\n            userID: function () {\r\n                return this.isgame ? '' : this.id;\r\n            }\r\n        },\r\n        created: function () {\r\n            this.loadData();\r\n        },\r\n        methods: {\r\n            loadData() {\r\n                var that = this;\r\n                this.loading = true;\r\n\r\n                var prms = axios.get('../Game/GetSpeedRunGridTabs', { params: { ID: this.id, isGame: this.isgame } })\r\n                                .then(res => {\r\n                                    that.items = res.data.tabItems;\r\n                                    that.gameID = res.data.gameID;\r\n                                    that.categoryTypeID = res.data.categoryTypeID;\r\n                                    that.categoryID = res.data.categoryID;\r\n                                    that.levelID = res.data.levelID;\r\n                                    that.variableValueIDs = res.data.variableValueIDs;\r\n                                    that.initSelected();\r\n                                    that.loading = false;\r\n                                    return res;\r\n                                })\r\n                                .catch(err => { console.error(err); return Promise.reject(err); });\r\n\r\n                return prms;\r\n            },\r\n            initSelected: function () {\r\n                var that = this;\r\n                this.gameID = this.gameID || this.items[0].id;\r\n\r\n                var game = this.items.find(game => game.id == that.gameID);\r\n\r\n                this.categoryTypeID = this.categoryTypeID || game.categoryTypes[0].id;\r\n\r\n                this.categoryID = this.categoryID || game.categories.find(category => category.categoryTypeID == that.categoryTypeID).id;\r\n\r\n                if (this.categoryTypeID == 1) {\r\n                    this.levelID = this.levelID || (game.levels ? game.levels[0].id : '');\r\n                } else {\r\n                    this.levelID = '';\r\n                }\r\n\r\n                if (!this.variableValueIDs) {\r\n                    this.variableValueIDs = {};\r\n                    if (this.categoryTypeID == 0) {\r\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1'))\r\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id })\r\n\r\n                    } else if (this.categoryTypeID == 1) {\r\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3'))\r\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id })\r\n                    }\r\n                }\r\n            },\r\n            resetSelected: function () {\r\n                var that = this;\r\n                var game = this.items.find(game => game.id == that.gameID);\r\n\r\n                var categoryTypeID = this.selected.find(item => item.gameID == that.gameID && item.type == 'categorytype')?.categoryTypeID;\r\n                this.categoryTypeID = categoryTypeID || game.categoryTypes[0].id;\r\n\r\n                var categoryID = this.selected.find(item => item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.type == 'category')?.categoryID;\r\n                this.categoryID = categoryID || game.categories.find(category => category.categoryTypeID == that.categoryTypeID).id;\r\n\r\n                if (this.categoryTypeID == 1) {\r\n                    var levelID = this.selected.find(item => item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && item.type == 'level')?.levelID;\r\n                    this.levelID = levelID || (game.levels ? game.levels[0].id : '');\r\n                } else {\r\n                    this.levelID = '';\r\n                }\r\n\r\n                var variableValueIDs = this.selected.find(item => item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && (!that.levelID || item.levelID == that.levelID) && item.type == 'variable')?.variableValueIDs;\r\n                if (variableValueIDs) {\r\n                    var variableVauleIDsCopy = Object.assign({}, variableValueIDs);\r\n                    this.variableValueIDs = variableVauleIDsCopy;\r\n                } else {\r\n                    if (this.categoryTypeID == 0) {\r\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '1'))\r\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id });\r\n                    } else {\r\n                        game.subCategoryVariables?.filter(variable => variable.categoryID == that.categoryID && variable.levelID == that.levelID && (variable.scopeTypeID == '0' || variable.scopeTypeID == '2' || variable.scopeTypeID == '3'))\r\n                            .forEach(variable => { that.variableValueIDs[variable.id] = variable.variableValues[0].id });\r\n                    }\r\n                }\r\n            },\r\n            onGameClick: function (event) {\r\n                var value = event.target.getAttribute('data-value');\r\n                this.gameID = value;\r\n\r\n                this.resetSelected();\r\n            },\r\n            onCategoryTypeClick: function (event) {\r\n                var value = event.target.getAttribute('data-value');\r\n                this.categoryTypeID = value;\r\n\r\n                var that = this;\r\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.type == 'categorytype'));\r\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, type: 'categorytype' });\r\n\r\n                this.resetSelected();\r\n            },\r\n            onCategoryClick: function (event) {\r\n                var value = event.target.getAttribute('data-value');\r\n                this.categoryID = value;\r\n\r\n                var that = this;\r\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.type == 'category'));\r\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, categoryID: this.categoryID, type: 'category' });\r\n\r\n\r\n                this.resetSelected();\r\n            },\r\n            onLevelClick: function (event) {\r\n                var value = event.target.getAttribute('data-value');\r\n                this.levelID = value;\r\n\r\n                var that = this;\r\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && item.type == 'level'));\r\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, categoryID: this.categoryID, levelID: this.levelID, type: 'level' });\r\n\r\n                this.resetSelected();\r\n            },\r\n            onVariableValueClick: function (event) {\r\n                var variableID = event.target.getAttribute('data-variable');\r\n                var value = event.target.getAttribute('data-value');\r\n                this.variableValueIDs[variableID] = value;\r\n\r\n                var that = this;\r\n                this.selected = this.selected.filter(item => !(item.gameID == that.gameID && item.categoryTypeID == that.categoryTypeID && item.categoryID == that.categoryID && (!item.levelID || item.levelID == that.levelID) && item.type == 'variable'));\r\n\r\n                var variableValueIDsCopy = Object.assign({}, this.variableValueIDs);\r\n                this.selected.push({ gameID: this.gameID, categoryTypeID: this.categoryTypeID, categoryID: this.categoryID, levelID: this.levelID, variableValueIDs: variableValueIDsCopy, type: 'variable' });\r\n\r\n                this.resetSelected();\r\n            }\r\n        }\r\n    };\r\n</script>\r\n<style>\r\n    .tab-list .nav-link {\r\n        background-color: #313131;\r\n        font-size: 13px;\r\n        font-weight: bold;\r\n    }\r\n\r\n/*    .tab-list .nav-link:hover {\r\n        background-color: #2b2a2a;\r\n    }\r\n*/\r\n   .tab-row-name {\r\n        font-size: 14px !important;\r\n        line-height: 18px;\r\n        font-weight: bold;\r\n    } \r\n</style>\r\n\r\n\r\n\r\n\r\n","<template>\r\n    <div class=\"card\">\r\n        <div class=\"card-header\" id=\"headingOne\">\r\n            <h5 class=\"mb-0\">\r\n                <div v-if=\"showCharts\">\r\n                    <a class=\"btn btn-link font-weight-bold\" href=\"#/\" @click=\"showCharts = !showCharts\"><i class=\"fa fa-chevron-down\"></i>&nbsp;&nbsp;Hide Charts</a>\r\n                </div>\r\n                <div v-else>\r\n                    <a class=\"btn btn-link font-weight-bold\" href=\"#/\" @click=\"showCharts = !showCharts\"><i class=\"fa fa-chevron-right\"></i>&nbsp;&nbsp;Show Charts</a>               \r\n                </div>\r\n            </h5>\r\n        </div>\r\n        <div class=\"container row\" :style=\"[ showCharts ? null : { display:'none' } ]\">\r\n            <div class=\"col-sm-4\">\r\n                <div id=\"divGameSpeedRunsByMonthChart\"></div>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n                <div id=\"divGameSpeedRunsPercentileChart\"></div>\r\n            </div>\r\n            <div class=\"col-sm-4\">\r\n                <div id=\"divGameTopSpeedRunChart\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import moment from 'moment';\r\n    //import { chain, clone, map, value, join } from 'lodash';\r\n    import { chain } from 'lodash';    \r\n    import { getDateDiffList, formatTime } from '../js/common.js';\r\n\r\n    export default {\r\n        name: \"SpeedRunGridChartsVue\",\r\n        props: {\r\n            tabledata: Array\r\n        },\r\n        data() {\r\n            return {\r\n                showCharts: false\r\n            }\r\n        },\r\n        created: function () {\r\n            this.loadData();\r\n        },\r\n        methods: {\r\n            loadData() {\r\n                var that = this;\r\n                FusionCharts.ready(function () {\r\n                    var gameWorldRecordChart = new FusionCharts(that.getGameWorldRecordChart());\r\n                    var gameSpeedRunsPercentileChart = new FusionCharts(that.getGameSpeedRunsPercentileChart());\r\n                    var gameTopSpeedRunChart = new FusionCharts(that.getGameTopSpeedRunChart());\r\n\r\n                    gameWorldRecordChart.render();\r\n                    gameSpeedRunsPercentileChart.render();\r\n                    gameTopSpeedRunChart.render();\r\n                });\r\n            },\r\n            getGameWorldRecordChart() {\r\n                var that = this;\r\n                var categories = [];\r\n                var dataset = [];\r\n\r\n                if (this.tabledata?.length > 0) {\r\n                    var _data = chain(this.tabledata).clone().value();\r\n                    _data = _data.sort((a, b) => { \r\n                        return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds\r\n                    });                    \r\n\r\n                    var filteredData = [];\r\n                    while (_data.length > 0) {\r\n                        var item = _data[0];\r\n                        filteredData.push(item);\r\n\r\n                        _data = _data.filter(x => x.dateSubmitted < item.dateSubmitted)\r\n                                     .sort((a, b) => { return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds });\r\n                    }\r\n                    //filteredData = filteredData.slice(0, 10);\r\n\r\n                    var dates = filteredData.map(item => { return new Date(item.dateSubmitted) });\r\n                    var maxDate = moment(Math.max.apply(null, dates)).toDate();\r\n                    var minDate = moment(Math.min.apply(null, dates)).toDate();\r\n\r\n                    var _timePeriods = getDateDiffList(\"month\", minDate, maxDate).map(x => { return moment(x).format(\"MM/YYYY\") });\r\n\r\n                    var groupedObj = {};\r\n                    var chartDataObj = {};\r\n                    var categoryObj = {};\r\n\r\n                    filteredData.forEach(item => {\r\n                        var monthYear = moment(item.dateSubmitted).format(\"MM/YYYY\")\r\n\r\n                        groupedObj[monthYear] = groupedObj[monthYear] || [];\r\n                        groupedObj[monthYear].push(item.primaryTimeMilliseconds);\r\n                        \r\n                        // var monthDayYear = moment(item.dateSubmitted).format(\"MM/DD/YYYY\")\r\n\r\n                        // groupedObj[monthDayYear] = groupedObj[monthDayYear] || [];\r\n                        // groupedObj[monthDayYear].push(item.primaryTimeMilliseconds);                        \r\n                    });\r\n\r\n                    if (Object.keys(groupedObj).length > 0) {\r\n                        var minKey = 'Min Time';\r\n                        chartDataObj[minKey] = {};\r\n                        for (var key in groupedObj) {\r\n                            chartDataObj[minKey][key] = chartDataObj[minKey][key] || [];\r\n\r\n                            var min = Math.min.apply(null, groupedObj[key]);\r\n                            chartDataObj[minKey][key] = min;\r\n\r\n                            //var min = Math.min.apply(null, groupedObj[key]);\r\n                            //chartDataObj[minKey][key] = groupedObj[key]                                                     \r\n                        }\r\n\r\n                        categoryObj[\"category\"] = _timePeriods.map(item => {\r\n                            var labelObj = {};\r\n                            labelObj[\"label\"] = item\r\n                            return labelObj;\r\n                        });\r\n                        categories.push(categoryObj);\r\n\r\n                        for (var key in chartDataObj) {\r\n                            _timePeriods.forEach(timePeriod => {\r\n                                if (!chartDataObj[key].hasOwnProperty(timePeriod)) {\r\n                                    chartDataObj[key][timePeriod] = null;\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n\r\n                    for (var key in chartDataObj) {\r\n                        var data = chain(Object.entries(chartDataObj[key])).map(function (x) { return { category: x[0], value: x[1] } }).value();                        \r\n                        if (data.length > 0) {\r\n                            data = data.sort((a, b) => {\r\n                                var monthyeara = a.category.split(\"/\");\r\n                                var monthyearb = b.category.split(\"/\");\r\n\r\n                                return new Date(monthyeara[1], monthyeara[0] - 1) - new Date(monthyearb[1], monthyearb[0] - 1)\r\n                            });\r\n                            // data = data.sort((a, b) => {\r\n                            //     var monthdayyeara = a.category.split(\"/\");\r\n                            //     var monthdayyearb = b.category.split(\"/\");\r\n\r\n                            //     return new Date(monthdayyeara[2], monthdayyeara[0] - 1, monthdayyeara[1]) - new Date(monthdayyearb[2], monthdayyearb[0] - 1, monthdayyearb[1])\r\n                            // });                            \r\n                            dataset.push({ seriesname: key, data: data });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const chartConfig = {\r\n                    type: \"msline\",\r\n                    renderAt: \"divGameSpeedRunsByMonthChart\",\r\n                    width: \"100%\",\r\n                    //height: \"350\",\r\n                    dataFormat: \"json\",\r\n                    dataSource: {\r\n                        chart: {\r\n                            caption: 'World Records',\r\n                            subCaption: 'Fastest Per Month',\r\n                            xAxis: 'Date',\r\n                            yAxis: 'Time (Minutes)',\r\n                            labelDisplay: \"rotate\",\r\n                            exportEnabled: 0,\r\n                            showValues: 0,\r\n                            formatNumberScale: 1,\r\n                            numberOfDecimals: 0,\r\n                            useRoundEdges: 1,\r\n                            numberscalevalue: \"1000,60,60\",\r\n                            numberscaleunit: \"s,m,h\",\r\n                            defaultnumberscale: \"ms\",\r\n                            scalerecursively: \"1\",\r\n                            maxscalerecursion: \"-1\",\r\n                            scaleseparator: \" \",\r\n                            connectNullData: 1,\r\n                            plotBinSize: 1,\r\n                            setAdaptiveYMin: 1,\r\n                            theme: \"candy\",\r\n                            bgColor: \"#303030\",\r\n                            baseFontColor: \"#fff\",\r\n                            outCnvBaseFontColor: \"#fff\"\r\n                        },\r\n                        categories: categories,\r\n                        dataset: dataset\r\n                    }\r\n                };\r\n\r\n                return chartConfig;\r\n            },            \r\n            getGameSpeedRunsByMonthChart() {\r\n                var that = this;\r\n                var categories = [];\r\n                var dataset = [];\r\n\r\n                if (this.tabledata?.length > 0) {\r\n                    //var _data = _.chain(this.tabledata).clone().value();\r\n                    var _data = chain(this.tabledata).clone().value();                    \r\n                    var dates = _data.map(item => { return new Date(item.dateSubmitted) });\r\n                    var maxDate = moment(Math.max.apply(null, dates)).toDate();\r\n                    var minDate = moment(maxDate).add(-24, \"months\").toDate();\r\n                    var minDataDate = moment(Math.min.apply(null, dates)).toDate();\r\n                    minDate = minDataDate > minDate ? minDataDate : minDate;\r\n\r\n                    var filteredData = _data.filter((x, i) => {\r\n                        return new Date(x.dateSubmitted) >= minDate\r\n                    }).sort((a, b) => { return new Date(a.dateSubmitted) - new Date(b.dateSubmitted) });\r\n\r\n                    var timePeriods = getDateDiffList(\"month\", minDate, maxDate).map(x => { return moment(x).format(\"MM/YYYY\") });\r\n\r\n                    //var _timePeriods = _.chain(timePeriods).clone().value();\r\n                    var _timePeriods = chain(timePeriods).clone().value();\r\n                    var groupedObj = {};\r\n                    var chartDataObj = {};\r\n                    var categoryObj = {};\r\n\r\n                    filteredData.forEach(item => {\r\n                        var monthYear = item.monthYearSubmitted;\r\n\r\n                        groupedObj[monthYear] = groupedObj[monthYear] || [];\r\n                        groupedObj[monthYear].push(item.primaryTimeMilliseconds);\r\n                    });\r\n\r\n                    if (Object.keys(groupedObj).length > 0) {\r\n                        var minKey = 'Min Time';\r\n                        chartDataObj[minKey] = {};\r\n                        for (var key in groupedObj) {\r\n                            chartDataObj[minKey][key] = chartDataObj[minKey][key] || [];\r\n\r\n                            var min = Math.min.apply(null, groupedObj[key]);\r\n                            chartDataObj[minKey][key] = min;\r\n                        }\r\n\r\n                        categoryObj[\"category\"] = _timePeriods.map(item => {\r\n                            var labelObj = {};\r\n                            labelObj[\"label\"] = item\r\n                            return labelObj;\r\n                        });\r\n                        categories.push(categoryObj);\r\n\r\n                        for (var key in chartDataObj) {\r\n                            _timePeriods.forEach(timePeriod => {\r\n                                if (!chartDataObj[key].hasOwnProperty(timePeriod)) {\r\n                                    chartDataObj[key][timePeriod] = null;\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n\r\n                    for (var key in chartDataObj) {\r\n                        //var data = _.chain(Object.entries(chartDataObj[key])).map(function (x) { return { category: x[0], value: x[1] } }).value();\r\n                        var data = chain(Object.entries(chartDataObj[key])).map(function (x) { return { category: x[0], value: x[1] } }).value();                        \r\n                        if (data.length > 0) {\r\n                            data = data.sort((a, b) => {\r\n                                var monthyeara = a.category.split(\"/\");\r\n                                var monthyearb = b.category.split(\"/\");\r\n\r\n                                return new Date(monthyeara[1], monthyeara[0] - 1) - new Date(monthyearb[1], monthyearb[0] - 1)\r\n                            });\r\n                            dataset.push({ seriesname: key, data: data });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const chartConfig = {\r\n                    type: \"msline\",\r\n                    renderAt: \"divGameSpeedRunsByMonthChart\",\r\n                    width: \"100%\",\r\n                    //height: \"350\",\r\n                    dataFormat: \"json\",\r\n                    dataSource: {\r\n                        chart: {\r\n                            caption: 'Fastest Per Month',\r\n                            subCaption: 'Last 2 Years',\r\n                            xAxis: 'Date',\r\n                            yAxis: 'Time (Minutes)',\r\n                            exportEnabled: 0,\r\n                            showValues: 0,\r\n                            formatNumberScale: 1,\r\n                            numberOfDecimals: 0,\r\n                            useRoundEdges: 1,\r\n                            numberscalevalue: \"1000,60,60\",\r\n                            numberscaleunit: \"s,m,h\",\r\n                            defaultnumberscale: \"ms\",\r\n                            scalerecursively: \"1\",\r\n                            maxscalerecursion: \"-1\",\r\n                            scaleseparator: \" \",\r\n                            connectNullData: 1,\r\n                            setAdaptiveYMin: 1,\r\n                            theme: \"candy\",\r\n                            bgColor: \"#303030\",\r\n                            baseFontColor: \"#fff\",\r\n                            outCnvBaseFontColor: \"#fff\"\r\n                        },\r\n                        categories: categories,\r\n                        dataset: dataset\r\n                    }\r\n                };\r\n\r\n                return chartConfig;\r\n            },\r\n            getGameSpeedRunsPercentileChart() {\r\n                var that = this;\r\n                var dataset = [];\r\n\r\n                if (this.tabledata?.length > 0) {\r\n                    //var _data = _.chain(this.tabledata).clone().value();\r\n                    var _data = chain(this.tabledata).clone().value();\r\n                    var allSpeedRunTimes = _data.sort((a, b) => { return a?.PrimaryTimeMilliseconds - b?.PrimaryTimeMilliseconds; });\r\n\r\n                    var chartDataObj = {};\r\n                    var percIncrement = 5;\r\n                    var maxPerc = 25;\r\n                    var showEvery = 2;\r\n                    var maxNumCategories = Math.round((100 / percIncrement) / showEvery) + 1;\r\n\r\n                    var prevPercNum = null;\r\n                    var prevIndex = null;\r\n                    var prevTime = null;\r\n\r\n                    var prevTotal = 0;\r\n                    for (var i = 0; i < maxNumCategories; i++) {\r\n                        var percNum = (i == 0) ? percIncrement : prevPercNum + (percIncrement * showEvery);\r\n                        var index = Math.ceil((allSpeedRunTimes.length + 1) * (percNum / 100));\r\n                        index = ((index > 0) ? index - 1 : 0);// + ((prevIndex > 0) ? prevIndex - 1 : 0)\r\n\r\n                        var time;\r\n                        var key;\r\n                        var percent;\r\n                        var values = allSpeedRunTimes.filter((x, i) => { return i <= index });\r\n\r\n                        if (index >= allSpeedRunTimes.length - 1 || percNum > maxPerc || i == (maxNumCategories - 1)) {\r\n                            values = allSpeedRunTimes.filter((x, i) => { return i >= prevTotal });\r\n                            percent = Math.trunc((values.length / allSpeedRunTimes.length) * 100) || 0;\r\n                            key = '> ' + formatTime(\"milliseconds\", prevTime) + \" (\" + percent + \"% - \" + values.length + \"/\" + allSpeedRunTimes.length + \")\";\r\n                            chartDataObj[key] = values;\r\n                            break;\r\n                        } else {\r\n                            time = allSpeedRunTimes[index].primaryTimeMilliseconds;\r\n                            percent = Math.trunc((values.length / allSpeedRunTimes.length) * 100) || 0;\r\n                            key = '<= ' + formatTime(\"milliseconds\", time) + \" (\" + percent + \"% - \" + values.length + \"/\" + allSpeedRunTimes.length + \")\";\r\n\r\n                            if (index != prevIndex) {\r\n                                chartDataObj[key] = values;\r\n                            }\r\n                        }\r\n\r\n                        prevTotal = values.length - 1;\r\n                        prevPercNum = percNum;\r\n                        prevIndex = index;\r\n                        prevTime = time;\r\n                    }\r\n\r\n                    dataset = Object.entries(chartDataObj)\r\n                        .map(x => {\r\n                            return { label: x[0], value: x[1].length }\r\n                        });\r\n                }\r\n\r\n                const chartConfig = {\r\n                    type: \"pie3d\",\r\n                    renderAt: \"divGameSpeedRunsPercentileChart\",\r\n                    width: \"100%\",\r\n                    //height: \"350\",\r\n                    dataFormat: \"json\",\r\n                    dataSource: {\r\n                        chart: {\r\n                            caption: 'Time Percentiles',\r\n                            subCaption: '',\r\n                            showValues: 1,\r\n                            formatNumberScale: 0,\r\n                            numberOfDecimals: 0,\r\n                            showPercentValues: 0,\r\n                            showPercentInTooltip: 0,\r\n                            exportEnabled: 0,\r\n                            showLegend: 1,\r\n                            showLabels: 0,\r\n                            theme: \"candy\",\r\n                            bgColor: \"#303030\",\r\n                            baseFontColor: \"#fff\",\r\n                            outCnvBaseFontColor: \"#fff\"\r\n                        },\r\n                        data: dataset\r\n                    }\r\n                };\r\n\r\n                return chartConfig;\r\n            },\r\n            getGameTopSpeedRunChart() {\r\n                var that = this;\r\n                var categories = [];\r\n                var dataset = [];\r\n\r\n                if (this.tabledata?.length > 0) {\r\n                    //var _data = _.chain(this.tabledata).clone().value();\r\n                    var _data = chain(this.tabledata).clone().value();\r\n                    _data = _data.filter(x => x.rank);\r\n                    var sortedData = _data.sort((a, b) => { return a?.primaryTimeMilliseconds - b?.primaryTimeMilliseconds; });\r\n                    var data = sortedData.slice(0, 10);\r\n\r\n                    var chartDataObj = {};\r\n                    var categoryObj = {};\r\n                    data.forEach(item => {\r\n                        //var playerNames = _.chain(item.players).map(function (item) { return item.name }).value().join(\",\");\r\n                        var playerNames = chain(item.players).map(function (item) { return item.name }).value().join(\",\");\r\n\r\n                        //chartDataObj[playerNames] = chartDataObj[playerNames] || [];\r\n                        chartDataObj[playerNames] = item.primaryTimeMilliseconds;\r\n                    });\r\n\r\n                    categoryObj[\"category\"] = data.map(item => {\r\n                        var labelObj = {};\r\n                        labelObj[\"label\"] = item.players?.map(item => {\r\n                            return item.name;\r\n                        }).join(\",\");\r\n                        return labelObj;\r\n                    });\r\n                    categories.push(categoryObj);\r\n\r\n                    var dataValues = data.map(item => {\r\n                        return { value: item.primaryTimeMilliseconds};\r\n                    });                    \r\n\r\n                    dataset.push({ seriesname: '', data: dataValues });\r\n                }\r\n\r\n                const chartConfig = {\r\n                    type: \"stackedBar2D\",\r\n                    renderAt: \"divGameTopSpeedRunChart\",\r\n                    width: \"100%\",\r\n                    //height: \"350\",\r\n                    dataFormat: \"json\",\r\n                    dataSource: {\r\n                        chart: {\r\n                            caption: 'Top 10 Ranked Runs',\r\n                            subCaption: '',\r\n                            xAxis: '',\r\n                            yAxis: 'Time (Minutes)',\r\n                            exportEnabled: 0,\r\n                            showValues: 1,\r\n                            formatNumberScale: 1,\r\n                            numberOfDecimals: 0,\r\n                            useRoundEdges: 1,\r\n                            numberscalevalue: \"1000,60,60\",\r\n                            numberscaleunit: \"s,m,h\",\r\n                            defaultnumberscale: \"ms\",\r\n                            scalerecursively: \"1\",\r\n                            maxscalerecursion: \"-1\",\r\n                            scaleseparator: \"\",\r\n                            theme: \"candy\",\r\n                            bgColor: \"#303030\",\r\n                            baseFontColor: \"#fff\",\r\n                            outCnvBaseFontColor: \"#fff\"\r\n                        },\r\n                        categories: categories,\r\n                        dataset: dataset\r\n                    }\r\n                };\r\n\r\n                return chartConfig;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n   .fusioncharts-container>svg>g:nth-of-type(2){\r\n        display:none !important;\r\n    }\r\n</style>\r\n\r\n\r\n\r\n\r\n"],"names":[],"sourceRoot":""}